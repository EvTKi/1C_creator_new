"""
–ú–æ–¥—É–ª—å: monitel_framework.ui_base
–ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è GUI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –≤ —Ä–∞–º–∫–∞—Ö Monitel Framework.

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç:
- –ë–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –æ–∫–Ω–∞
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é —Å —Å–∏—Å—Ç–µ–º–æ–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
- –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å (—Ç—ë–º–Ω–∞—è —Ç–µ–º–∞)
- –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä, –ª–æ–≥, –∫–Ω–æ–ø–∫–∏
- –ì–æ—Ç–æ–≤ –∫ –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—é

–ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
    class MyConverter(BaseMainWindow):
        def start_conversion(self):
            # –í–∞—à–∞ –ª–æ–≥–∏–∫–∞
            pass

        def process_file(self, csv_path, parent_uid, log_dir_path):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞
            pass
"""

import logging
import sys
from pathlib import Path
from typing import Optional, List

# PyQt6
try:
    from PyQt6.QtWidgets import (
        QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
        QPushButton, QLabel, QLineEdit, QFileDialog, QScrollArea,
        QCheckBox, QPlainTextEdit, QGroupBox, QProgressBar
    )
    from PyQt6.QtCore import Qt, QObject, pyqtSignal
    from PyQt6.QtGui import QPalette, QColor, QFont, QTextCursor
    from PyQt6.QtCore import QProcess
except ImportError as e:
    raise ImportError("–¢—Ä–µ–±—É–µ—Ç—Å—è PyQt6. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install PyQt6") from e

# –§—Ä–µ–π–º–≤–æ—Ä–∫
from .config import ConfigManager
from .files import FileManager
from .logging import LoggerConfig, LoggerManager, UILogHandler, FileLogHandler


class LogSignal(QObject):
    """
    –°–∏–≥–Ω–∞–ª –¥–ª—è –ø–æ—Ç–æ–∫–æ–±–µ–∑–æ–ø–∞—Å–Ω–æ–π –ø–µ—Ä–µ–¥–∞—á–∏ –ª–æ–≥–æ–≤ –≤ GUI.

    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —Å–≤—è–∑–∏ –º–µ–∂–¥—É –ª–æ–≥–≥–µ—Ä–æ–º –∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º.
    """
    message = pyqtSignal(str)


class BaseMainWindow(QMainWindow):
    """
    –ë–∞–∑–æ–≤–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –æ–±—â–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º.

    –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω –¥–ª—è –Ω–∞—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.
    –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç–µ:
    - `start_conversion()` ‚Äî –¥–ª—è —Å–≤–æ–µ–π –ª–æ–≥–∏–∫–∏ –∑–∞–ø—É—Å–∫–∞
    - `process_file()` ‚Äî –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞

    Attributes:
        config (ConfigManager): –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        logger (Optional[logging.Logger]): –û—Å–Ω–æ–≤–Ω–æ–π –ª–æ–≥–≥–µ—Ä GUI
        file_checkboxes (List[QCheckBox]): –ß–µ–∫–±–æ–∫—Å—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤
        log_dir_path (Optional[Path]): –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ log
    """

    def __init__(self, config_file: str = "config.json"):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–∞–∑–æ–≤–æ–µ –æ–∫–Ω–æ.

        Args:
            config_file (str): –ü—É—Ç—å –∫ JSON-–∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        """
        super().__init__()
        self.config = ConfigManager(config_file)
        self.logger_manager: Optional[LoggerManager] = None
        self.logger: Optional[logging.Logger] = None
        self.file_checkboxes: List[QCheckBox] = []
        self.log_dir_path: Optional[Path] = None

        self._setup_logging()
        self._setup_ui()
        self._apply_modern_style()

    def _setup_logging(self) -> None:
        """
        –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è GUI.

        –°–æ–∑–¥–∞—ë—Ç:
        - –õ–æ–≥–≥–µ—Ä —Å –∏–º–µ–Ω–µ–º 'gui'
        - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å (—á–µ—Ä–µ–∑ —Å–∏–≥–Ω–∞–ª)
        - FileHandler –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª `gui_YYYY-MM-DD.log`

        –£—Ä–æ–≤–µ–Ω—å –±–µ—Ä—ë—Ç—Å—è –∏–∑ `config.json`.
        """
        log_level = getattr(logging, self.config.get("logging.level", "INFO"))
        log_format = self.config.get("logging.format", "%(asctime)s [%(levelname)s]: %(message)s")
        date_format = self.config.get("logging.date_format", "%Y-%m-%d %H:%M:%S")

        log_config = LoggerConfig(level=log_level, format_string=log_format, date_format=date_format)
        self.logger_manager = LoggerManager(log_config)

        base_dir = Path.cwd()
        log_dir_name = self.config.get("io.log_dir", "log")
        self.log_dir_path = base_dir / log_dir_name
        self.log_dir_path.mkdir(parents=True, exist_ok=True)

        from datetime import datetime
        date_str = datetime.now().strftime("%Y-%m-%d")
        gui_log_path = self.log_dir_path / f"gui_{date_str}.log"

        self.logger = self.logger_manager.create_logger("gui", ui_callback=lambda msg: None)
        assert self.logger is not None, "Failed to create logger"
        self.logger.setLevel(log_level)

        self.log_signal = LogSignal()
        self.log_signal.message.connect(self.append_log)

        ui_handler = UILogHandler(self.log_signal, level=log_level)
        ui_handler.setFormatter(log_config.formatter)
        self.logger.addHandler(ui_handler)

        file_handler = FileLogHandler(gui_log_path, mode="a", encoding="utf-8")
        file_handler.setLevel(log_level)
        file_handler.setFormatter(log_config.formatter)
        self.logger.addHandler(file_handler)

        self.logger.info("GUI –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ –≤–≤–æ–¥–∞...")

    def _setup_ui(self) -> None:
        """
        –°–æ–∑–¥–∞—ë—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏:
        - –ü–æ–ª–µ –≤–≤–æ–¥–∞ UID
        - –ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏
        - –°–ø–∏—Å–æ–∫ CSV-—Ñ–∞–π–ª–æ–≤
        - –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        - –ö–Ω–æ–ø–∫–∏ –∑–∞–ø—É—Å–∫–∞ –∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –ø–∞–ø–∫–∏
        - –û–±–ª–∞—Å—Ç—å –ª–æ–≥–æ–≤
        """
        container = QWidget()
        layout = QVBoxLayout()
        layout.setSpacing(15)
        layout.setContentsMargins(20, 20, 20, 20)

        # === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
        settings_group = QGroupBox("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        settings_layout = QVBoxLayout()

        # UID
        uid_layout = QHBoxLayout()
        uid_layout.addWidget(QLabel("UID –∫–æ—Ä–Ω—è:"))
        self.uid_input = QLineEdit()
        self.uid_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ UID...")
        uid_layout.addWidget(self.uid_input)
        settings_layout.addLayout(uid_layout)

        # –ü–∞–ø–∫–∞ CSV
        dir_layout = QHBoxLayout()
        dir_layout.addWidget(QLabel("CSV –ø–∞–ø–∫–∞:"))
        self.dir_input = QLineEdit()
        self.dir_input.setPlaceholderText("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É...")
        dir_layout.addWidget(self.dir_input)

        self.browse_btn = QPushButton("üìÅ –í—ã–±—Ä–∞—Ç—å –ø–∞–ø–∫—É")
        self.browse_btn.setObjectName("browse_button")
        self.browse_btn.setMinimumHeight(40)
        self.browse_btn.clicked.connect(self.browse_directory)
        dir_layout.addWidget(self.browse_btn)
        settings_layout.addLayout(dir_layout)

        settings_group.setLayout(settings_layout)
        layout.addWidget(settings_group)

        # === –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ ===
        files_group = QGroupBox("üìã –§–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        files_layout = QVBoxLayout()

        self.files_scroll = QScrollArea()
        self.files_scroll.setWidgetResizable(True)
        self.files_widget = QWidget()
        self.files_layout = QVBoxLayout(self.files_widget)
        self.files_layout.setSpacing(5)
        self.files_layout.setContentsMargins(10, 10, 10, 10)
        self.files_scroll.setWidget(self.files_widget)
        files_layout.addWidget(self.files_scroll)

        files_group.setLayout(files_layout)
        layout.addWidget(files_group)

        # === –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä ===
        self.progress_bar = QProgressBar()
        self.progress_bar.setValue(0)
        self.progress_bar.setTextVisible(True)
        self.progress_bar.setFormat("–ì–æ—Ç–æ–≤–æ: %p%")
        layout.addWidget(self.progress_bar)

        # === –ö–Ω–æ–ø–∫–∏ ===
        btn_layout = QHBoxLayout()

        self.run_btn = QPushButton("‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫")
        self.run_btn.setObjectName("run_button")
        self.run_btn.setFixedSize(100, 30)
        self.run_btn.clicked.connect(self.start_conversion)
        btn_layout.addWidget(self.run_btn)

        self.open_folder_btn = QPushButton("üìÅ –ü–∞–ø–∫–∞")
        self.open_folder_btn.setObjectName("folder_button")
        self.open_folder_btn.setFixedSize(100, 30)
        self.open_folder_btn.clicked.connect(self.open_results_folder)
        btn_layout.addWidget(self.open_folder_btn)

        btn_layout.addStretch()
        layout.addLayout(btn_layout)

        # === –õ–æ–≥ ===
        log_group = QGroupBox("üìù –õ–æ–≥ –æ–ø–µ—Ä–∞—Ü–∏–π")
        log_layout = QVBoxLayout()

        self.log_text = QPlainTextEdit()
        self.log_text.setReadOnly(True)
        self.log_text.setMinimumHeight(250)
        log_layout.addWidget(self.log_text)

        log_group.setLayout(log_layout)
        layout.addWidget(log_group, stretch=1)

        # === –°—Ç–∞—Ç—É—Å ===
        self.status_label = QLabel("üü¢ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        layout.addWidget(self.status_label)

        container.setLayout(layout)
        self.setCentralWidget(container)

    def _apply_modern_style(self) -> None:
        """
        –ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å (—Ç—ë–º–Ω–∞—è —Ç–µ–º–∞) –∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—É.

        –°—Ç–∏–ª—å –≤–∫–ª—é—á–∞–µ—Ç:
        - –¶–≤–µ—Ç–∞ —Ñ–æ–Ω–∞ –∏ —Ç–µ–∫—Å—Ç–∞
        - –°–∫—Ä—É–≥–ª–µ–Ω–∏—è
        - –≠—Ñ—Ñ–µ–∫—Ç—ã –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
        """
        colors = {
            "bg": "#1e1e1e",
            "fg": "#dcdcdc",
            "accent": "#007acc",
            "accent_hover": "#005a9e",
            "border": "#3c3c3c",
            "scroll_bg": "#2d2d2d",
            "log_bg": "#1e1e1e",
            "log_text": "#dcdcdc",
        }
        font_size = 10

        self.setStyleSheet(f"""
            QMainWindow {{ background-color: {colors['bg']}; color: {colors['fg']}; font-size: {font_size}pt; }}
            QGroupBox {{ border: 1px solid {colors['border']}; border-radius: 8px; margin-top: 20px; padding: 15px; }}
            QLabel {{ color: {colors['fg']}; }}
            QLineEdit {{ padding: 12px; border: 1px solid {colors['border']}; border-radius: 8px; }}
            QPushButton {{ padding: 6px 10px; border-radius: 8px; font-weight: bold; }}
            QPushButton#run_button, QPushButton#folder_button {{
                background-color: {colors['accent']}; color: white; border: none;
            }}
            QPushButton#run_button:hover, QPushButton#folder_button:hover {{
                background-color: {colors['accent_hover']};
            }}
            QPlainTextEdit {{
                background-color: {colors['log_bg']}; color: {colors['log_text']};
                border: 1px solid {colors['border']}; border-radius: 8px;
                font-family: 'Consolas', monospace; font-size: 9pt;
            }}
            QProgressBar::chunk {{ background-color: {colors['accent']}; }}
        """)

    def browse_directory(self) -> None:
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏ —Å CSV-—Ñ–∞–π–ª–∞–º–∏."""
        folder = QFileDialog.getExistingDirectory(self, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É —Å CSV")
        if folder:
            self.dir_input.setText(folder)
            self.populate_file_list()

    def populate_file_list(self) -> None:
        """–ó–∞–ø–æ–ª–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö CSV-—Ñ–∞–π–ª–æ–≤ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ."""
        for checkbox in self.file_checkboxes:
            checkbox.setParent(None)
        self.file_checkboxes.clear()

        folder = self.dir_input.text()
        if not folder or not Path(folder).is_dir():
            return

        try:
            files = [
                f for f in Path(folder).iterdir()
                if f.is_file() and f.suffix.lower() == '.csv' and f.name.lower() != 'sample.csv'
            ]
            files = sorted(files, key=lambda x: x.name)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ø–∞–ø–∫–∏: {e}")
            return

        if not files:
            no_files_label = QLabel("üìÅ –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö CSV-—Ñ–∞–π–ª–æ–≤")
            no_files_label.setStyleSheet("color: #dc3545; font-style: italic;")
            self.files_layout.addWidget(no_files_label)
            self.file_checkboxes.append(no_files_label)
            return

        for file_path in files:
            checkbox = QCheckBox(file_path.name)
            checkbox.setChecked(True)
            self.files_layout.addWidget(checkbox)
            self.file_checkboxes.append(checkbox)

        self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(files)}")

    def append_log(self, message: str) -> None:
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ –ª–æ–≥–∞ —Å –∞–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π.

        Args:
            message (str): –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        """
        cursor = self.log_text.textCursor()
        cursor.movePosition(QTextCursor.MoveOperation.End)
        self.log_text.setTextCursor(cursor)
        self.log_text.insertPlainText(message)
        cursor.movePosition(QTextCursor.MoveOperation.End)
        self.log_text.setTextCursor(cursor)

    def start_conversion(self) -> None:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤.

        –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω –≤ –ø–æ–¥–∫–ª–∞—Å—Å–µ.
        """
        raise NotImplementedError("start_conversion() –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –ø–æ–¥–∫–ª–∞—Å—Å–µ")

    def process_file(self, csv_path: Path, parent_uid: str, log_dir_path: Path) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω CSV-—Ñ–∞–π–ª.

        –î–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω –≤ –ø–æ–¥–∫–ª–∞—Å—Å–µ.

        Args:
            csv_path (Path): –ü—É—Ç—å –∫ CSV-—Ñ–∞–π–ª—É
            parent_uid (str): UID –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            log_dir_path (Path): –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ log
        """
        raise NotImplementedError("process_file() –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ –ø–æ–¥–∫–ª–∞—Å—Å–µ")

    def open_results_folder(self) -> None:
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–∞–ø–∫—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–µ."""
        folder = self.dir_input.text()
        if not folder or not Path(folder).is_dir():
            self.logger.info("–ü–∞–ø–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∏–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        try:
            if sys.platform.startswith('win'):
                import os
                os.startfile(folder)
            elif sys.platform.startswith('darwin'):
                QProcess.startDetached('open', [folder])
            else:
                QProcess.startDetached('xdg-open', [folder])
            self.logger.info(f"–û—Ç–∫—Ä—ã—Ç–∞ –ø–∞–ø–∫–∞: {folder}")
        except Exception as e:
            self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É: {e}")

    def closeEvent(self, event) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ ‚Äî –æ—á–∏—â–∞–µ—Ç –ª–æ–≥–≥–µ—Ä—ã.

        Args:
            event: –°–æ–±—ã—Ç–∏–µ –∑–∞–∫—Ä—ã—Ç–∏—è
        """
        if self.logger_manager:
            self.logger_manager.cleanup_all_loggers()
        super().closeEvent(event)