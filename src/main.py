"""
–ú–æ–¥—É–ª—å: –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ CSV ‚Üí RDF/XML (CIM16)

–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é `process_file`, –∫–æ—Ç–æ—Ä–∞—è:
- –ß–∏—Ç–∞–µ—Ç CSV-—Ñ–∞–π–ª
- –ü–∞—Ä—Å–∏—Ç –∏–µ—Ä–∞—Ä—Ö–∏—é
- –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç RDF/XML
- –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç
- –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç modified.xlsx/csv —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å—Ç–∞—Ä—ã—Ö –∏ –Ω–æ–≤—ã—Ö UID

–ú–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ –≤ CLI, —Ç–∞–∫ –∏ –∏–∑ GUI.
"""

import logging
from pathlib import Path
from typing import Optional

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ —Ñ—Ä–µ–π–º–≤–æ—Ä–∫–∞
try:
    from monitel_framework.config import ConfigManager
    from monitel_framework.files import FileManager, CLIManager
    from monitel_framework.logging import LoggerManager, LoggerConfig
except ImportError:
    from .monitel_framework.config import ConfigManager
    from .monitel_framework.files import FileManager, CLIManager
    from .monitel_framework.logging import LoggerManager, LoggerConfig

# –õ–æ–∫–∞–ª—å–Ω—ã–µ –º–æ–¥—É–ª–∏
from modules.hierarchy_parser import HierarchyParser
from modules.xml_generator import XMLGenerator
from modules.modified_csv_exporter import save_modified_output  # ‚úÖ –ù–æ–≤—ã–π –º–æ–¥—É–ª—å


def process_file(
    csv_path: Path,
    parent_uid: str,
    config: ConfigManager,
    logger: Optional[logging.Logger] = None
) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω CSV-—Ñ–∞–π–ª: –ø–∞—Ä—Å–∏–Ω–≥ ‚Üí –≥–µ–Ω–µ—Ä–∞—Ü–∏—è RDF/XML ‚Üí —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ‚Üí —ç–∫—Å–ø–æ—Ä—Ç modified.

    –°–æ–∑–¥–∞—ë—Ç:
    - XML-—Ñ–∞–π–ª –≤ —Ç–æ–π –∂–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏, —á—Ç–æ –∏ –∏—Å—Ö–æ–¥–Ω—ã–π CSV
    - Modified XLSX/CSV —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å—Ç–∞—Ä—ã—Ö (–∑–µ–ª—ë–Ω—ã—Ö) –∏ –Ω–æ–≤—ã—Ö (—á—ë—Ä–Ω—ã—Ö) UID

    Args:
        csv_path (Path): –ü—É—Ç—å –∫ –≤—Ö–æ–¥–Ω–æ–º—É CSV-—Ñ–∞–π–ª—É
        parent_uid (str): UID –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è –Ω–æ–≤–æ–π –∏–µ—Ä–∞—Ä—Ö–∏–∏
        config (ConfigManager): –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        logger (Optional[logging.Logger]): –õ–æ–≥–≥–µ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏–π.
            –ï—Å–ª–∏ None ‚Äî –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Å —É—Ä–æ–≤–Ω–µ–º –∏–∑ config.

    Raises:
        Exception: –ü—Ä–∏ –æ—à–∏–±–∫–∞—Ö –ø–∞—Ä—Å–∏–Ω–≥–∞, –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–ª–∏ –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞
    """
    # –ï—Å–ª–∏ –ª–æ–≥–≥–µ—Ä –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω ‚Äî —Å–æ–∑–¥–∞—ë–º —Å–≤–æ–π
    if logger is None:
        log_level = getattr(logging, config.get("logging.level", "INFO"))
        log_format = config.get(
            "logging.format", "%(asctime)s [%(levelname)s]: %(message)s")
        date_format = config.get("logging.date_format", "%Y-%m-%d %H:%M:%S")
        log_config = LoggerConfig(
            level=log_level, format_string=log_format, date_format=date_format)
        logger_manager = LoggerManager(log_config)
        logger = logger_manager.create_logger("main")

    # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ logger –Ω–µ None (–¥–ª—è Pylance)
    assert logger is not None, "–õ–æ–≥–≥–µ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å None –ø–æ—Å–ª–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏"

    try:
        logger.info(f"–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {csv_path.name}")

        # --- –ü–∞—Ä—Å–∏–Ω–≥ CSV ---
        parser = HierarchyParser(str(csv_path), config.config, logger=logger)
        paths, external_children, cck_map, parent_uid_map = parser.parse()
        logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—É—Ç–µ–π: {len(paths)}")

        if not paths:
            logger.error(
                "‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ ‚Äî —Ñ–∞–π–ª –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –ø—É—Ç–µ–π")
            return

        # --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è XML ---
        generator = XMLGenerator(config.config, logger=logger)
        xml_content = generator.generate(
            paths=paths,
            external_children=external_children,
            parent_uid=parent_uid,
            cck_map=cck_map,
            parent_uid_map=parent_uid_map,
            virtual_containers=set(getattr(parser, 'path_to_uid', {}).keys())
        )
        logger.info("‚úÖ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è XML –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        # --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ XML ---
        output_path = csv_path.with_suffix(".xml")
        if output_path.exists():
            output_path.unlink()
            logger.debug(f"–£–¥–∞–ª—ë–Ω —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª: {output_path}")

        with open(output_path, "w", encoding="utf-8") as f:
            f.write(xml_content)

        logger.info(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_path}")

        # --- –≠–∫—Å–ø–æ—Ä—Ç modified-—Ñ–∞–π–ª–∞ ---
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            hierarchy_data = [
                {
                    "path": path,
                    "uid": parent_uid_map.get(path, "") or "",
                    "CCK_code": cck_map.get(path, "")
                }
                for path in paths
            ]

            # ‚úÖ –ü–µ—Ä–µ–¥–∞—ë–º logger –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            modified_path = save_modified_output(
                csv_path=csv_path,
                hierarchy=hierarchy_data,
                config=config.config,
                logger=logger
            )
            if modified_path:
                logger.info(f"üìÑ Modified —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {modified_path}")

        except Exception as e:
            logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ modified —Ñ–∞–π–ª–∞: {e}", exc_info=True)

    except Exception as e:
        logger.error(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {csv_path.name}: {e}", exc_info=True)
        raise


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞."""
    cli_manager = CLIManager()
    folder_uid, csv_dir = cli_manager.get_cli_parameters()

    if not folder_uid:
        print("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω UID –ø–∞–ø–∫–∏.")
        return

    # --- –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ ---
    config = ConfigManager("config.json")

    # --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ñ–∞–π–ª–æ–≤ ---
    file_manager = FileManager(
        base_directory=csv_dir or config.get("io.input_dir", "."),
        log_directory=config.get("io.log_dir", "logs")
    )

    if not file_manager.validate_directory():
        print(f"‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {file_manager.base_directory}")
        return

    # --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ CSV-—Ñ–∞–π–ª–æ–≤ ---
    exclude_files = config.get("io.exclude_files", ["Sample.csv"])
    csv_files = file_manager.get_csv_files(exclude_files=exclude_files)

    if not csv_files:
        print("‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö CSV-—Ñ–∞–π–ª–æ–≤.")
        return

    print("–ë—É–¥—É—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã:")
    for f in csv_files:
        print(f"  {f}")
    print("-" * 30)

    # --- –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ª–æ–≥–æ–≤ ---
    file_manager.create_log_directory()

    # --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞ ---
    for filename in csv_files:
        csv_path = file_manager.base_directory / filename
        process_file(csv_path, folder_uid, config)

    cli_manager.print_completion_message()


if __name__ == "__main__":
    main()
