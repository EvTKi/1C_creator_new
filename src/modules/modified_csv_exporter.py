"""
–ú–æ–¥—É–ª—å: modified_csv_exporter
–ù–∞–∑–Ω–∞—á–µ–Ω–∏–µ: –≠–∫—Å–ø–æ—Ä—Ç –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–æ–≥–æ CSV/XLSX —Ñ–∞–π–ª–∞ —Å –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å—Ç–∞—Ä—ã—Ö –∏ –Ω–æ–≤—ã—Ö UID.

–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª:
- –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–µ—Ä–∞—Ä—Ö–∏—é —Å UID –≤ XLSX (—Å —Ü–≤–µ—Ç–∞–º–∏) –∏–ª–∏ CSV (—Å –ø–æ–º–µ—Ç–∫–∞–º–∏)
- –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ config.json:
  - –§–æ—Ä–º–∞—Ç: xlsx/csv
  - –°—É—Ñ—Ñ–∏–∫—Å —Ñ–∞–π–ª–∞
  - –ö–æ–ª–æ–Ω–∫–∏ (—á–µ—Ä–µ–∑ config["csv"]["headers"])
- –ü–æ–¥—Å–≤–µ—á–∏–≤–∞–µ—Ç –∑–µ–ª—ë–Ω—ã–º UID, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ –≤ –∏—Å—Ö–æ–¥–Ω–æ–º CSV
- –û—Å—Ç–∞–≤–ª—è–µ—Ç —á—ë—Ä–Ω—ã–º —Ü–≤–µ—Ç–æ–º –Ω–æ–≤—ã–µ (—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ) UID
- –î–æ–±–∞–≤–ª—è–µ—Ç —Å—Ç–æ–ª–±–µ—Ü 'status' –≤ CSV –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ process_file –ø–æ—Å–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ XML.
"""

import csv
import logging
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Set, Optional

try:
    from openpyxl import Workbook
    from openpyxl.styles import Font, PatternFill
except ImportError:
    Workbook = None
    Font = None
    PatternFill = None


def _read_original_uids(csv_path: Path, config: Dict, logger: Optional[logging.Logger] = None) -> Set[str]:
    """
    –ß–∏—Ç–∞–µ—Ç –≤—Å–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–≤—à–∏–µ UID –∏–∑ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ CSV-—Ñ–∞–π–ª–∞.

    Args:
        csv_path (Path): –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É CSV-—Ñ–∞–π–ª—É
        config (Dict): –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∫–æ–ª–æ–Ω–∫–∏ UID)
        logger (Optional[logging.Logger]): –õ–æ–≥–≥–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π

    Returns:
        Set[str]: –ú–Ω–æ–∂–µ—Å—Ç–≤–æ UID, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –±—ã–ª–∏ –≤ —Ñ–∞–π–ª–µ
    """
    uids = set()
    uid_header = config["csv"]["headers"]["uid"]

    if logger:
        logger.debug(f"üîç –ü–æ–∏—Å–∫ UID –≤ –∫–æ–ª–æ–Ω–∫–µ: '{uid_header}'")

    try:
        with open(csv_path, "r", encoding="utf-8") as f:
            reader = csv.DictReader(f, delimiter=";")
            for row_num, row in enumerate(reader, start=2):
                uid = row.get(uid_header, "").strip()
                if uid:
                    uids.add(uid)
        if logger:
            logger.debug(
                f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(uids)} —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö UID –≤ {csv_path.name}")
    except Exception as e:
        if logger:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ UID: {e}")
        else:
            print(f"[WARN] –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ UID: {e}")
    return uids


def _get_headers(config: Dict) -> tuple:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –∏–º–µ–Ω–∞ –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏.

    Args:
        config (Dict): –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

    Returns:
        tuple: (path_col, uid_col, cck_col)
    """
    csv_headers = config["csv"]["headers"]
    return (
        csv_headers["path"],
        csv_headers["uid"],
        csv_headers["cck_code"]
    )


def save_modified_xlsx(
    csv_path: Path,
    hierarchy: List[Dict],
    config: Dict,
    logger: Optional[logging.Logger] = None,
    suffix: str = "_modified"
) -> Optional[Path]:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç modified XLSX —Å —Ü–≤–µ—Ç–æ–≤–æ–π –ø–æ–¥—Å–≤–µ—Ç–∫–æ–π —Å—Ç–∞—Ä—ã—Ö –∏ –Ω–æ–≤—ã—Ö UID.

    –°—Ç–∞—Ä—ã–µ UID (—É–∂–µ –±—ã–ª–∏ –≤ CSV) ‚Äî –∑–µ–ª—ë–Ω—ã–π —Ü–≤–µ—Ç.
    –ù–æ–≤—ã–µ UID (—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ) ‚Äî —á—ë—Ä–Ω—ã–π.

    Args:
        csv_path (Path): –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É CSV-—Ñ–∞–π–ª—É
        hierarchy (List[Dict]): –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏ —Å –ø–æ–ª—è–º–∏ 'path', 'uid', 'CCK_code'
        config (Dict): –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        logger (Optional[logging.Logger]): –õ–æ–≥–≥–µ—Ä –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π
        suffix (str): –°—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞

    Returns:
        Optional[Path]: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É XLSX –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ

    Raises:
        ImportError: –ï—Å–ª–∏ openpyxl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
    """
    if Workbook is None:
        error_msg = "‚ùå –î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ XLSX —Ç—Ä–µ–±—É–µ—Ç—Å—è openpyxl. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install openpyxl"
        if logger:
            logger.error(error_msg)
        else:
            print(error_msg)
        return None

    output_dir = csv_path.parent
    timestamp = datetime.now().strftime("%Y-%m-%d")
    output_name = f"{csv_path.stem}{suffix}_{timestamp}.xlsx"
    output_path = output_dir / output_name

    path_col, uid_col, cck_col = _get_headers(config)
    original_uids = _read_original_uids(csv_path, config, logger)

    try:
        wb = Workbook()
        ws = wb.active
        ws.title = "Modified Data"

        # –ó–∞–≥–æ–ª–æ–≤–∫–∏
        headers = [path_col, uid_col, cck_col]
        for col, header in enumerate(headers, 1):
            ws.cell(row=1, column=col, value=header)

        # –°—Ç–∏–ª–∏
        green_font = Font(color="006400")  # Dark green
        green_fill = PatternFill(start_color="CCFFCC",
                                 end_color="CCFFCC", fill_type="solid")

        for idx, item in enumerate(hierarchy, 2):
            path = item["path"]
            uid = item.get("uid", "").strip()
            ccs_code = item.get("CCK_code", "")

            ws.cell(row=idx, column=1, value=path)
            uid_cell = ws.cell(row=idx, column=2, value=uid)
            ws.cell(row=idx, column=3, value=ccs_code)

            if uid and uid in original_uids:
                uid_cell.font = green_font
                uid_cell.fill = green_fill

        wb.save(output_path)
        if logger:
            logger.info(f"‚úÖ Modified XLSX —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_path}")
        return output_path

    except Exception as e:
        if logger:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ XLSX: {e}", exc_info=True)
        else:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ XLSX: {e}")
        return None


def save_modified_csv(
    csv_path: Path,
    hierarchy: List[Dict],
    config: Dict,
    logger: Optional[logging.Logger] = None,
    suffix: str = "_modified"
) -> Optional[Path]:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç modified CSV —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —Å—Ç–æ–ª–±—Ü–æ–º —Å—Ç–∞—Ç—É—Å–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ).

    Args:
        csv_path (Path): –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É CSV-—Ñ–∞–π–ª—É
        hierarchy (List[Dict]): –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏
        config (Dict): –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        logger (Optional[logging.Logger]): –õ–æ–≥–≥–µ—Ä
        suffix (str): –°—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞

    Returns:
        Optional[Path]: –ü—É—Ç—å –∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–º—É CSV –∏–ª–∏ None –ø—Ä–∏ –æ—à–∏–±–∫–µ
    """
    output_dir = csv_path.parent
    timestamp = datetime.now().strftime("%Y-%m-%d")
    output_name = f"{csv_path.stem}{suffix}_{timestamp}.csv"
    output_path = output_dir / output_name

    path_col, uid_col, cck_col = _get_headers(config)
    original_uids = _read_original_uids(csv_path, config, logger)

    fieldnames = [path_col, uid_col, cck_col]
    include_status = config.get("modified_output", {}).get(
        "include_status_column", True)
    if include_status:
        fieldnames.append("status")

    try:
        with open(output_path, "w", encoding="utf-8", newline="") as f:
            writer = csv.DictWriter(f, fieldnames=fieldnames, delimiter=";")
            writer.writeheader()

            for item in hierarchy:
                path = item["path"]
                uid = item.get("uid", "").strip()
                ccs_code = item.get("CCK_code", "")
                status = "existing" if uid and uid in original_uids else "new"

                row = {
                    path_col: path,
                    uid_col: uid,
                    cck_col: ccs_code
                }
                if include_status:
                    row["status"] = status

                writer.writerow(row)

        if logger:
            logger.info(f"‚úÖ Modified CSV —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {output_path}")
        return output_path

    except Exception as e:
        if logger:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ CSV: {e}", exc_info=True)
        else:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ CSV: {e}")
        return None


def save_modified_output(
    csv_path: Path,
    hierarchy: List[Dict],
    config: Dict,
    logger: Optional[logging.Logger] = None
) -> Optional[Path]:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ modified-—Ñ–∞–π–ª–∞.

    –í—ã–±–∏—Ä–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç (XLSX –∏–ª–∏ CSV) –Ω–∞ –æ—Å–Ω–æ–≤–µ config.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –≤–∫–ª—é—á–µ–Ω–∞ –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è.

    Args:
        csv_path (Path): –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É CSV
        hierarchy (List[Dict]): –î–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
        config (Dict): –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
        logger (Optional[logging.Logger]): –õ–æ–≥–≥–µ—Ä

    Returns:
        Optional[Path]: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∏–ª–∏ None, –µ—Å–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω–æ/–æ—à–∏–±–∫–∞
    """
    if not config.get("modified_output", {}).get("enabled", True):
        if logger:
            logger.debug("‚ÑπÔ∏è –≠–∫—Å–ø–æ—Ä—Ç modified-—Ñ–∞–π–ª–∞ –æ—Ç–∫–ª—é—á—ë–Ω –≤ config")
        return None

    fmt = config["modified_output"].get("format", "xlsx").lower()
    suffix = config["modified_output"].get("suffix", "_modified")

    if logger:
        logger.info(
            f"üì§ –≠–∫—Å–ø–æ—Ä—Ç modified-—Ñ–∞–π–ª–∞: —Ñ–æ—Ä–º–∞—Ç={fmt}, —Å—É—Ñ—Ñ–∏–∫—Å='{suffix}'")

    if fmt == "csv":
        return save_modified_csv(csv_path, hierarchy, config, logger, suffix)
    else:
        if fmt != "xlsx":
            if logger:
                logger.warning(
                    f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {fmt}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è xlsx.")
            else:
                print(f"[WARN] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {fmt}. –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è xlsx.")
        return save_modified_xlsx(csv_path, hierarchy, config, logger, suffix)
