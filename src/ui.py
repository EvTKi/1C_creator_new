"""
GUI –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ CSV ‚Üí RDF/XML (CIM16)
–° —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º debug-–ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
"""

from PyQt6.QtWidgets import QApplication
import logging
import sys
from pathlib import Path

# üî• –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∫—ç—à–∞
to_remove = [k for k in sys.modules.keys(
) if k.startswith('monitel_framework')]
for k in to_remove:
    del sys.modules[k]

src_path = Path(__file__).parent
if str(src_path) not in sys.path:
    sys.path.insert(0, str(src_path))


# –§—Ä–µ–π–º–≤–æ—Ä–∫
try:
    from monitel_framework import BaseMainWindow, ConfigManager
    from monitel_framework.files import FileManager
    from monitel_framework.logging import LoggerManager, LoggerConfig
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ monitel_framework: {e}")
    raise

# –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
main_process_file = None


def load_main_module():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç main_process_file —Å –æ—Ç–ª–∞–¥–∫–æ–π"""
    global main_process_file
    try:
        from main import process_file as mp
        main_process_file = mp
        assert callable(
            main_process_file), "main.process_file –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π"
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ main.py: {e}")
        if 'logger' in globals():
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å main.py: {e}")
        return False


class MainWindow(BaseMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("üß© –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä CSV ‚Üí RDF/XML (CIM16)")
        self.resize(950, 720)

        # üîπ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–ª–∞–¥–æ—á–Ω—ã–µ –ª–æ–≥–∏
        self.logger.debug("üîß MainWindow: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        self.logger.debug(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {Path.cwd()}")
        self.logger.debug(f"üìÑ config.json –ø—É—Ç—å: {self.config.config_path}")
        self.logger.debug(f"üìÇ log_dir_path: {self.log_dir_path}")

        if not load_main_module():
            self.logger.critical(
                "üõë –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: main.py –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ù–ï –ë–£–î–ï–¢ —Ä–∞–±–æ—Ç–∞—Ç—å.")
        else:
            self.logger.info("‚úÖ –ú–æ–¥—É–ª—å main.py —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω")

    def start_conversion(self) -> None:
        try:
            folder_uid = self.uid_input.text().strip()
            csv_dir = self.dir_input.text().strip()

            self.logger.info("üöÄ –ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏...")
            self.logger.debug(f"UID: '{folder_uid}'")
            self.logger.debug(f"–ü–∞–ø–∫–∞ CSV: '{csv_dir}'")

            if not folder_uid:
                self.logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω UID –ø–∞–ø–∫–∏.")
                return

            if not csv_dir:
                self.logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–∞ –ø–∞–ø–∫–∞ —Å CSV.")
                return

            if not Path(csv_dir).is_dir():
                self.logger.error(f"‚ùå –ü–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {csv_dir}")
                return

            self.status_label.setText("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞...")
            self.run_btn.setEnabled(False)
            # sys.stdout.flush()

            file_manager = FileManager(base_directory=csv_dir)
            if not file_manager.validate_directory():
                self.logger.error(f"‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞: {csv_dir}")
                return

            exclude_files = self.config.get("io.exclude_files", ["Sample.csv"])
            self.logger.debug(f"üìã –ò—Å–∫–ª—é—á—ë–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã: {exclude_files}")
            csv_files = file_manager.get_csv_files(exclude_files=exclude_files)

            if not csv_files:
                self.logger.error("‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö CSV-—Ñ–∞–π–ª–æ–≤.")
                return

            self.logger.info(f"üì¶ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(csv_files)}")
            for f in csv_files:
                self.logger.debug(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–π —Ñ–∞–π–ª: {f}")

            total = len(csv_files)
            self.progress_bar.setMaximum(total)
            self.progress_bar.setValue(0)

            assert self.log_dir_path is not None, "log_dir_path –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
            log_dir_path = self.log_dir_path

            for i, filename in enumerate(csv_files, 1):
                csv_path = file_manager.base_directory / filename
                self.logger.info(
                    f"--- [{i}/{total}] –û–±—Ä–∞–±–æ—Ç–∫–∞: {filename} ---")
                self.logger.debug(f"üîç –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É: {csv_path}")
                self.logger.debug(
                    f"üìù –õ–æ–≥ –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: {log_dir_path / f'{csv_path.stem}_*.log'}")

                self.process_file(csv_path, folder_uid, log_dir_path)
                self.progress_bar.setValue(i)

            self.logger.info("‚úÖ –ì–æ—Ç–æ–≤–æ. –í—Å–µ —Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")
            self.status_label.setText("üü¢ –ì–æ—Ç–æ–≤–æ")
            self.progress_bar.setValue(total)

        except Exception as e:
            import traceback
            tb = ''.join(traceback.format_exception(None, e, e.__traceback__))
            self.logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –≤ start_conversion:\n{e}\n{tb}", exc_info=True)
        finally:
            self.run_btn.setEnabled(True)

    def process_file(self, csv_path: Path, parent_uid: str, log_dir_path: Path) -> None:
        try:
            if main_process_file is None:
                self.logger.error(
                    "‚ùå –§—É–Ω–∫—Ü–∏—è main_process_file –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ main.py")
                return

            from datetime import datetime
            date_str = datetime.now().strftime("%Y-%m-%d")
            csv_log_path = log_dir_path / f"{csv_path.stem}_{date_str}.log"

            log_level = getattr(
                logging, self.config.get("logging.level", "INFO"))
            log_config = LoggerConfig(level=log_level)
            file_logger = LoggerManager(log_config).create_logger(
                name=f"processor.{csv_path.stem}",
                log_file_path=str(csv_log_path)
            )
            file_logger.setLevel(log_level)

            self.logger.debug(f"üñ® –°–æ–∑–¥–∞–Ω –ª–æ–≥–≥–µ—Ä –¥–ª—è —Ñ–∞–π–ª–∞: {csv_log_path}")

            main_process_file(csv_path, parent_uid,
                              self.config, logger=file_logger)
            # ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –ª–æ–≥ –≤ GUI
            modified_path = csv_path.parent / \
                f"{csv_path.stem}_modified_*.xlsx"
            # –ü—Ä–æ—Å—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º ‚Äî –ø—É—Ç—å –º–æ–∂–Ω–æ —É—Ç–æ—á–Ω–∏—Ç—å –≤ –ª–æ–≥–∞—Ö
            self.append_log(
                f"üìÑ –°–æ–∑–¥–∞–Ω modified —Ñ–∞–π–ª: {csv_path.stem}_modified_*.xlsx\n")

        except Exception as e:
            import traceback
            tb = ''.join(traceback.format_exception(None, e, e.__traceback__))
            self.logger.error(
                f"‚ùå –û—à–∏–±–∫–∞ –≤ process_file:\n{e}\n{tb}", exc_info=True)


def main():
    app = QApplication(sys.argv)
    app.setStyle("Fusion")
    window = MainWindow()
    window.show()
    sys.exit(app.exec())


if __name__ == "__main__":
    main()
