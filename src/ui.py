"""
GUI –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ CSV ‚Üí RDF/XML (CIM16)
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç BaseMainWindow –∏–∑ monitel_framework.
"""

import sys
import logging
from pathlib import Path

# –§—Ä–µ–π–º–≤–æ—Ä–∫
from monitel_framework import BaseMainWindow, ConfigManager
# –õ–æ–≥–∏–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
try:
    from main import process_file as main_process_file
except ImportError:
    from .main import process_file as main_process_file
from monitel_framework.files import FileManager


class MainWindow(BaseMainWindow):
    """
    –ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è GUI –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ CSV ‚Üí RDF/XML.

    –ù–∞—Å–ª–µ–¥—É–µ—Ç –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏ —Ä–µ–∞–ª–∏–∑—É–µ—Ç:
    - –õ–æ–≥–∏–∫—É –∑–∞–ø—É—Å–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    - –û–±—Ä–∞–±–æ—Ç–∫—É –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    """

    def start_conversion(self) -> None:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞–∫–µ—Ç–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö CSV-—Ñ–∞–π–ª–æ–≤.

        –î–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞:
        - –°–æ–∑–¥–∞—ë—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä
        - –í—ã–∑—ã–≤–∞–µ—Ç main_process_file
        - –û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
        """
        folder_uid = self.uid_input.text().strip()
        csv_dir = self.dir_input.text().strip()

        if not folder_uid:
            self.logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω UID –ø–∞–ø–∫–∏.")
            return

        if not csv_dir:
            self.logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω–∞ –ø–∞–ø–∫–∞ —Å CSV.")
            return

        self.status_label.setText("üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞...")
        self.run_btn.setEnabled(False)
        sys.stdout.flush()

        try:
            file_manager = FileManager(base_directory=csv_dir)
            if not file_manager.validate_directory():
                self.logger.error(f"‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {csv_dir}")
                return

            exclude_files = self.config.get("io.exclude_files", ["Sample.csv"])
            csv_files = file_manager.get_csv_files(exclude_files=exclude_files)

            if not csv_files:
                self.logger.error("‚ùå –ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö CSV-—Ñ–∞–π–ª–æ–≤.")
                return

            total = len(csv_files)
            self.progress_bar.setMaximum(total)
            self.progress_bar.setValue(0)

            for i, filename in enumerate(csv_files, 1):
                csv_path = file_manager.base_directory / filename
                self.logger.info(f"--- [{i}/{total}] –û–±—Ä–∞–±–æ—Ç–∫–∞: {filename} ---")
                self.process_file(csv_path, folder_uid, self.log_dir_path)
                self.progress_bar.setValue(i)

            self.logger.info("‚úÖ –ì–æ—Ç–æ–≤–æ. –í—Å–µ —Ñ–∞–π–ª—ã –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã.")
            self.status_label.setText("üü¢ –ì–æ—Ç–æ–≤–æ")
            self.progress_bar.setValue(total)

        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}", exc_info=True)
            self.status_label.setText("üî¥ –û—à–∏–±–∫–∞")
        finally:
            self.run_btn.setEnabled(True)

    def process_file(self, csv_path: Path, parent_uid: str, log_dir_path: Path) -> None:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–¥–∏–Ω CSV-—Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é main_process_file.

        –°–æ–∑–¥–∞—ë—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–π –ª–æ–≥–≥–µ—Ä —Å –∑–∞–ø–∏—Å—å—é –≤ —Ñ–∞–π–ª: {–∏–º—è}_YYYY-MM-DD.log

        Args:
            csv_path (Path): –ü—É—Ç—å –∫ CSV-—Ñ–∞–π–ª—É
            parent_uid (str): UID –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –æ–±—ä–µ–∫—Ç–∞
            log_dir_path (Path): –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ log
        """
        try:
            from monitel_framework.logging import LoggerManager, LoggerConfig
            from datetime import datetime
            date_str = datetime.now().strftime("%Y-%m-%d")
            csv_log_path = log_dir_path / f"{csv_path.stem}_{date_str}.log"

            log_level = getattr(logging, self.config.get("logging.level", "INFO"))
            log_config = LoggerConfig(level=log_level)
            file_logger = LoggerManager(log_config).create_logger(
                name=f"processor.{csv_path.stem}",
                log_file_path=csv_log_path
            )
            file_logger.setLevel(log_level)

            main_process_file(csv_path, parent_uid, self.config, logger=file_logger)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞: {e}", exc_info=True)


def main():
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è GUI-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è."""
    app = QApplication(sys.argv)
    window = MainWindow()
    window.show()
    sys.exit(app.exec())


if __name__ == "__main__":
    main()