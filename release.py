"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–ø—É—Å–∫–∞ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏
–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏
"""

import subprocess
import sys
from pathlib import Path
from typing import Optional

def run(cmd: str, check: bool = True, shell: bool = True, encoding: str = 'utf-8') -> Optional[subprocess.CompletedProcess]:
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ —á–∏—Ç–∞–µ—Ç –≤—ã–≤–æ–¥"""
    print(f"üîß –í—ã–ø–æ–ª–Ω—è—é: {cmd}")
    try:
        result = subprocess.run(
            cmd,
            shell=shell,
            capture_output=True,
            text=True,
            encoding=encoding,
            errors='replace'  # –ó–∞–º–µ–Ω—è–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –Ω–∞ 
        )
        if result.stdout:
            clean_out = result.stdout.strip()
            if clean_out:
                print(f"‚úÖ –í—ã–≤–æ–¥: {clean_out}")
        if result.stderr:
            clean_err = result.stderr.strip()
            if clean_err:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞: {clean_err}")
        if check and result.returncode != 0:
            print(f"‚ùå –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –∫–æ–¥–æ–º {result.returncode}")
            sys.exit(result.returncode)
        return result
    except Exception as e:
        print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
        if check:
            sys.exit(1)
        return None  # –Ø–≤–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None –ø—Ä–∏ –æ—à–∏–±–∫–µ

def main():
    print("üöÄ –°–∫—Ä–∏–ø—Ç –≤—ã–ø—É—Å–∫–∞ –Ω–æ–≤–æ–π –≤–µ—Ä—Å–∏–∏")
    print("–§–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏: X.Y.Z, –Ω–∞–ø—Ä–∏–º–µ—Ä: 1.2.0")

    version = input("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏: ").strip()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞
    if not version.replace(".", "").isdigit() or len(version.split(".")) != 3:
        print("‚ùå –û—à–∏–±–∫–∞: –≤–µ—Ä—Å–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ X.Y.Z (–Ω–∞–ø—Ä–∏–º–µ—Ä, 1.2.0)")
        sys.exit(1)

    tag_name = f"v{version}"

    print(f"\nüì¶ –í–µ—Ä—Å–∏—è: {version}")
    print(f"üè∑  –¢–µ–≥: {tag_name}")

    confirm = input("\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤—ã–ø—É—Å–∫ (y/N): ").strip().lower()
    if confirm not in ("y", "yes"):
        print("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(0)

    # –û–±–Ω–æ–≤–ª—è–µ–º VERSION
    try:
        with open("VERSION", "w", encoding="utf-8") as f:
            f.write(f"{version}\n")
        print(f"‚úÖ –ó–∞–ø–∏—Å–∞–Ω–æ –≤ VERSION: {version}")
    except Exception as e:
        print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å VERSION: {e}")
        sys.exit(1)

    # Git –∫–æ–º–∞–Ω–¥—ã
    run("git add VERSION")
    run(f'git commit -m "chore: bump version to {version}"')
    run("git checkout main")

    # Merge ‚Äî –º–æ–∂–µ—Ç –Ω–µ –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è
    merge_result = run(
        "git merge HEAD@{1} --no-ff -m 'chore: merge release branch'",
        check=False
    )
    # ‚úÖ Pylance: –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ merge_result –Ω–µ None
    if merge_result is not None and merge_result.returncode != 0:
        print("‚ÑπÔ∏è  Merge –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–ª–∏ —É–∂–µ –≤—ã–ø–æ–ª–Ω–µ–Ω ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º")

    run("git push origin main")
    run(f"git tag {tag_name}")
    run(f"git push origin {tag_name}")

    print("\n" + "‚úÖ" * 50)
    print(f"üéâ –í—ã–ø—É—Å–∫ {tag_name} –∑–∞–ø—É—â–µ–Ω!")
    print("GitHub Actions –Ω–∞—á–Ω—ë—Ç —Å–±–æ—Ä–∫—É .exe –∏ —Å–æ–∑–¥–∞—Å—Ç —Ä–µ–ª–∏–∑.")
    print(f"–°–º–æ—Ç—Ä–∏—Ç–µ: github.com/–≤–∞—à-—Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π/actions")
    print("‚úÖ" * 50)


if __name__ == "__main__":
    main()