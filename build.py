"""
–°–±–æ—Ä–∫–∞ .exe –¥–ª—è –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞ CSV ‚Üí RDF/XML
–†–µ–∂–∏–º: —Ç–æ–ª—å–∫–æ release (–±–µ–∑ –∫–æ–Ω—Å–æ–ª–∏)
"""

import toml
import subprocess
import sys
from pathlib import Path
import shutil
import zipfile

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
CONFIG_FILE = "build.toml"
BUILD_MODE = "release"  # –í CI –≤—Å–µ–≥–¥–∞ release

# --- –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥ ---
try:
    config = toml.load(CONFIG_FILE)
except FileNotFoundError:
    print(f"‚ùå –§–∞–π–ª –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {CONFIG_FILE}")
    sys.exit(1)

pyi = config["pyinstaller"]
build = config["build"]

# --- –ü—É—Ç–∏ ---
src_dir = Path("src")
dist_dir = Path("dist")
final_dir = dist_dir / "final"
zip_name = f"{build['name']}_v{build['version']}.zip"

# --- –û—á–∏—Å—Ç–∫–∞ ---
def clean():
    for folder in ["build", "dist"]:
        if Path(folder).exists():
            shutil.rmtree(folder)
            print(f"üßπ –£–¥–∞–ª–µ–Ω–∞ –ø–∞–ø–∫–∞: {folder}")

# --- –°–±–æ—Ä–∫–∞ ---
def build_exe():
    cmd = [sys.executable, "-m", "PyInstaller"]
    cmd.append("--noconsole")        # –¢–æ–ª—å–∫–æ release
    cmd.append("--onefile")
    
    if pyi.get("name"):
        cmd.extend(["--name", pyi["name"]])
    
    for data in pyi.get("datas", []):
        src = data["src"]
        dest = data["dest"]
        sep = ";" if sys.platform.startswith("win") else ":"
        cmd.extend(["--add-data", f"{src}{sep}{dest}"])
    
    for module in pyi.get("hiddenimports", []):
        cmd.extend(["--hidden-import", module])
    
    for path in pyi.get("paths", []):
        cmd.extend(["--paths", path])
    
    cmd.append(pyi["script"])
    
    print(f"üîß –°–±–æ—Ä–∫–∞: {cmd}")
    result = subprocess.run(cmd)
    if result.returncode != 0:
        print("‚ùå –°–±–æ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å")
        sys.exit(1)

# --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –ø–∞–ø–∫–∏ ---
def prepare_final():
    final_dir.mkdir(parents=True, exist_ok=True)
    
    # –ö–æ–ø–∏—Ä—É–µ–º .exe
    exe_name = f"{pyi['name']}.exe"
    src_exe = dist_dir / exe_name
    dst_exe = final_dir / exe_name
    
    if not src_exe.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {src_exe}")
        sys.exit(1)
        
    shutil.copy(src_exe, dst_exe)
    print(f"‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {exe_name}")
    
    # –ö–æ–ø–∏—Ä—É–µ–º config.json
    if Path("config.json").exists():
        shutil.copy("config.json", final_dir / "config.json")
        print("‚úÖ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: config.json")
    else:
        print("‚ùå config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        sys.exit(1)

# --- –ê—Ä—Ö–∏–≤–∞—Ü–∏—è ---
def make_zip():
    with zipfile.ZipFile(zip_name, 'w', zipfile.ZIP_DEFLATED) as zf:
        for file in final_dir.iterdir():
            zf.write(file, arcname=file.name)
    print(f"üì¶ –ê—Ä—Ö–∏–≤ —Å–æ–∑–¥–∞–Ω: {zip_name}")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å ---
if __name__ == "__main__":
    print(f"üöÄ –°–±–æ—Ä–∫–∞: {build['name']} v{build['version']} (—Ä–µ–∂–∏–º: release)")
    clean()
    build_exe()
    prepare_final()
    make_zip()
    print(f"‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {zip_name}")